// <auto-generated />
using System;
using CharacterCreator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterCreator.Migrations
{
    [DbContext(typeof(CharacterCreatorContext))]
    [Migration("20230714213729_UpdateSkillJoinEntities")]
    partial class UpdateSkillJoinEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CharacterCreator.Models.Ancestry", b =>
                {
                    b.Property<int>("AncestryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AncestryDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("AncestryName")
                        .HasColumnType("longtext");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("Speed")
                        .HasColumnType("longtext");

                    b.Property<int>("StartingHitpoints")
                        .HasColumnType("int");

                    b.Property<string>("Trait")
                        .HasColumnType("longtext");

                    b.HasKey("AncestryId");

                    b.ToTable("Ancestries");

                    b.HasData(
                        new
                        {
                            AncestryId = 1,
                            AncestryDescription = "The most common ancestry, humans have a variety of strengths and are best represented by their versatility",
                            AncestryName = "Human",
                            Size = "medium",
                            Speed = "25 feet",
                            StartingHitpoints = 8,
                            Trait = "Humans have no distinctive physical characteristics."
                        },
                        new
                        {
                            AncestryId = 2,
                            AncestryDescription = "Dwarves are squat, hardy folk known for their skill at metalworking, and most at home in their ancient undergound cities",
                            AncestryName = "Dwarf",
                            Size = "medium",
                            Speed = "20 feet",
                            StartingHitpoints = 10,
                            Trait = "Darkvision: Dwarves can see in darkness and dim light just as well as in bright light, though their vision in such conditions is limited to black and white."
                        },
                        new
                        {
                            AncestryId = 3,
                            AncestryDescription = "Fair folk, taller and sleeker than humans and having an innate connection to the magical currents of the world.",
                            AncestryName = "Elf",
                            Size = "medium",
                            Speed = "30 feet",
                            StartingHitpoints = 6,
                            Trait = "Low-Light Vision: Elves can see in dim light as though it were bright light, and ignore the concealed condition due to dim light."
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryBoost", b =>
                {
                    b.Property<int>("AncestryBoostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AncestryId")
                        .HasColumnType("int");

                    b.Property<int>("BoostId")
                        .HasColumnType("int");

                    b.HasKey("AncestryBoostId");

                    b.HasIndex("AncestryId");

                    b.HasIndex("BoostId");

                    b.ToTable("AncestryBoosts");

                    b.HasData(
                        new
                        {
                            AncestryBoostId = 1,
                            AncestryId = 1,
                            BoostId = 7
                        },
                        new
                        {
                            AncestryBoostId = 2,
                            AncestryId = 1,
                            BoostId = 7
                        },
                        new
                        {
                            AncestryBoostId = 3,
                            AncestryId = 2,
                            BoostId = 3
                        },
                        new
                        {
                            AncestryBoostId = 4,
                            AncestryId = 2,
                            BoostId = 5
                        },
                        new
                        {
                            AncestryBoostId = 5,
                            AncestryId = 2,
                            BoostId = 7
                        },
                        new
                        {
                            AncestryBoostId = 6,
                            AncestryId = 3,
                            BoostId = 2
                        },
                        new
                        {
                            AncestryBoostId = 7,
                            AncestryId = 3,
                            BoostId = 4
                        },
                        new
                        {
                            AncestryBoostId = 8,
                            AncestryId = 3,
                            BoostId = 7
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFeat", b =>
                {
                    b.Property<int>("AncestryFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AncestryFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("AncestryFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("AncestryId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("AncestryFeatId");

                    b.HasIndex("AncestryId");

                    b.ToTable("AncestryFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFlaw", b =>
                {
                    b.Property<int>("AncestryFlawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AncestryId")
                        .HasColumnType("int");

                    b.Property<int>("FlawId")
                        .HasColumnType("int");

                    b.HasKey("AncestryFlawId");

                    b.HasIndex("AncestryId");

                    b.HasIndex("FlawId");

                    b.ToTable("AncestryFlaw");

                    b.HasData(
                        new
                        {
                            AncestryFlawId = 1,
                            AncestryId = 2,
                            FlawId = 6
                        },
                        new
                        {
                            AncestryFlawId = 2,
                            AncestryId = 3,
                            FlawId = 3
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CharacterCreator.Models.Background", b =>
                {
                    b.Property<int>("BackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BackgroundDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundName")
                        .HasColumnType("longtext");

                    b.Property<int>("SkillFeatId")
                        .HasColumnType("int");

                    b.HasKey("BackgroundId");

                    b.HasIndex("SkillFeatId");

                    b.ToTable("Backgrounds");

                    b.HasData(
                        new
                        {
                            BackgroundId = 1,
                            BackgroundDescription = "You spent your early days in a religious monastery or cloister. You may have traveled out into the world to spread the message of your religion or because you cast away the teachings of your faith, but deep down you'll always carry within you the lessons you learned.",
                            BackgroundName = "Acolyte",
                            SkillFeatId = 1
                        },
                        new
                        {
                            BackgroundId = 2,
                            BackgroundDescription = "As an unscrupulous independent or as a member of an underworld organization, you lived a life of crime. You might have become an adventurer to seek redemption, to escape the law, or simply to get access to bigger and better loot.",
                            BackgroundName = "Criminal",
                            SkillFeatId = 2
                        },
                        new
                        {
                            BackgroundId = 3,
                            BackgroundDescription = "You called the wilderness home as you found trails and guided travelers. Your wanderlust could have called you to the adventuring life, or perhaps you served as a scout for soldiers and found you liked battle.",
                            BackgroundName = "Scout",
                            SkillFeatId = 3
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.BackgroundBoost", b =>
                {
                    b.Property<int>("BackgroundBoostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("int");

                    b.Property<int>("BoostId")
                        .HasColumnType("int");

                    b.HasKey("BackgroundBoostId");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("BoostId");

                    b.ToTable("BackgroundBoosts");

                    b.HasData(
                        new
                        {
                            BackgroundBoostId = 1,
                            BackgroundId = 1,
                            BoostId = 4
                        },
                        new
                        {
                            BackgroundBoostId = 2,
                            BackgroundId = 1,
                            BoostId = 5
                        },
                        new
                        {
                            BackgroundBoostId = 3,
                            BackgroundId = 1,
                            BoostId = 7
                        },
                        new
                        {
                            BackgroundBoostId = 4,
                            BackgroundId = 2,
                            BoostId = 2
                        },
                        new
                        {
                            BackgroundBoostId = 5,
                            BackgroundId = 2,
                            BoostId = 4
                        },
                        new
                        {
                            BackgroundBoostId = 6,
                            BackgroundId = 2,
                            BoostId = 7
                        },
                        new
                        {
                            BackgroundBoostId = 7,
                            BackgroundId = 3,
                            BoostId = 2
                        },
                        new
                        {
                            BackgroundBoostId = 8,
                            BackgroundId = 3,
                            BoostId = 5
                        },
                        new
                        {
                            BackgroundBoostId = 9,
                            BackgroundId = 3,
                            BoostId = 7
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.BackgroundSkill", b =>
                {
                    b.Property<int>("BackgroundSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("BackgroundSkillId");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("SkillId");

                    b.ToTable("BackgroundSkills");

                    b.HasData(
                        new
                        {
                            BackgroundSkillId = 1,
                            BackgroundId = 1,
                            SkillId = 12
                        },
                        new
                        {
                            BackgroundSkillId = 2,
                            BackgroundId = 1,
                            SkillId = 17
                        },
                        new
                        {
                            BackgroundSkillId = 3,
                            BackgroundId = 2,
                            SkillId = 14
                        },
                        new
                        {
                            BackgroundSkillId = 4,
                            BackgroundId = 2,
                            SkillId = 18
                        },
                        new
                        {
                            BackgroundSkillId = 5,
                            BackgroundId = 3,
                            SkillId = 15
                        },
                        new
                        {
                            BackgroundSkillId = 6,
                            BackgroundId = 3,
                            SkillId = 19
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.Boost", b =>
                {
                    b.Property<int>("BoostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbilityBoost")
                        .HasColumnType("longtext");

                    b.HasKey("BoostId");

                    b.ToTable("Boosts");

                    b.HasData(
                        new
                        {
                            BoostId = 1,
                            AbilityBoost = "strength"
                        },
                        new
                        {
                            BoostId = 2,
                            AbilityBoost = "dexterity"
                        },
                        new
                        {
                            BoostId = 3,
                            AbilityBoost = "constitution"
                        },
                        new
                        {
                            BoostId = 4,
                            AbilityBoost = "intelligence"
                        },
                        new
                        {
                            BoostId = 5,
                            AbilityBoost = "wisdom"
                        },
                        new
                        {
                            BoostId = 6,
                            AbilityBoost = "charisma"
                        },
                        new
                        {
                            BoostId = 7,
                            AbilityBoost = "free"
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AncestryId")
                        .HasColumnType("int");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .HasColumnType("longtext");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Hitpoints")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("AncestryId");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterAncestryFeat", b =>
                {
                    b.Property<int>("CharacterAncestryFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AncestryFeatId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("CharacterAncestryFeatId");

                    b.HasIndex("AncestryFeatId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAncestryFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClass", b =>
                {
                    b.Property<int>("CharacterClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CharacterClassDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("CharacterClassName")
                        .HasColumnType("longtext");

                    b.Property<string>("KeyAbility")
                        .HasColumnType("longtext");

                    b.Property<int>("StartingHitpoints")
                        .HasColumnType("int");

                    b.HasKey("CharacterClassId");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClassFeat", b =>
                {
                    b.Property<int>("CharacterClassFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ClassFeatId")
                        .HasColumnType("int");

                    b.HasKey("CharacterClassFeatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ClassFeatId");

                    b.ToTable("CharacterClassFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClassSkill", b =>
                {
                    b.Property<int>("CharacterClassSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("CharacterClassSkillId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterClassSkills");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterGeneralFeat", b =>
                {
                    b.Property<int>("CharacterGeneralFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("GeneralFeatId")
                        .HasColumnType("int");

                    b.HasKey("CharacterGeneralFeatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GeneralFeatId");

                    b.ToTable("CharacterGeneralFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSkillId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkill");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterSkillFeat", b =>
                {
                    b.Property<int>("CharacterSkillFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralFeatId")
                        .HasColumnType("int");

                    b.Property<int>("SkillFeatId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSkillFeatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GeneralFeatId");

                    b.HasIndex("SkillFeatId");

                    b.ToTable("CharacterSkillFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.ClassFeat", b =>
                {
                    b.Property<int>("ClassFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<string>("ClassFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ClassFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("ClassFeatId");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("ClassFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Flaw", b =>
                {
                    b.Property<int>("FlawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbilityFlaw")
                        .HasColumnType("longtext");

                    b.HasKey("FlawId");

                    b.ToTable("Flaws");

                    b.HasData(
                        new
                        {
                            FlawId = 1,
                            AbilityFlaw = "strength"
                        },
                        new
                        {
                            FlawId = 2,
                            AbilityFlaw = "dexterity"
                        },
                        new
                        {
                            FlawId = 3,
                            AbilityFlaw = "constitution"
                        },
                        new
                        {
                            FlawId = 4,
                            AbilityFlaw = "intelligence"
                        },
                        new
                        {
                            FlawId = 5,
                            AbilityFlaw = "wisdom"
                        },
                        new
                        {
                            FlawId = 6,
                            AbilityFlaw = "charisma"
                        },
                        new
                        {
                            FlawId = 7,
                            AbilityFlaw = "free"
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.GeneralFeat", b =>
                {
                    b.Property<int>("GeneralFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GeneralFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("GeneralFeatId");

                    b.ToTable("GeneralFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .HasColumnType("longtext");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            SkillName = "Acrobatics"
                        },
                        new
                        {
                            SkillId = 2,
                            SkillName = "Arcana"
                        },
                        new
                        {
                            SkillId = 3,
                            SkillName = "Athletics"
                        },
                        new
                        {
                            SkillId = 4,
                            SkillName = "Crafting"
                        },
                        new
                        {
                            SkillId = 5,
                            SkillName = "Deception"
                        },
                        new
                        {
                            SkillId = 6,
                            SkillName = "Diplomacy"
                        },
                        new
                        {
                            SkillId = 7,
                            SkillName = "Intimidation"
                        },
                        new
                        {
                            SkillId = 8,
                            SkillName = "Medicine"
                        },
                        new
                        {
                            SkillId = 9,
                            SkillName = "Nature"
                        },
                        new
                        {
                            SkillId = 10,
                            SkillName = "Occultism"
                        },
                        new
                        {
                            SkillId = 11,
                            SkillName = "Performance"
                        },
                        new
                        {
                            SkillId = 12,
                            SkillName = "Religion"
                        },
                        new
                        {
                            SkillId = 13,
                            SkillName = "Society"
                        },
                        new
                        {
                            SkillId = 14,
                            SkillName = "Stealth"
                        },
                        new
                        {
                            SkillId = 15,
                            SkillName = "Survival"
                        },
                        new
                        {
                            SkillId = 16,
                            SkillName = "Thievery"
                        },
                        new
                        {
                            SkillId = 17,
                            SkillName = "Scribing Lore"
                        },
                        new
                        {
                            SkillId = 18,
                            SkillName = "Underworld Lore"
                        },
                        new
                        {
                            SkillId = 19,
                            SkillName = "Terrain Lore"
                        });
                });

            modelBuilder.Entity("CharacterCreator.Models.SkillFeat", b =>
                {
                    b.Property<int>("SkillFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PrerequisiteTraining")
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.Property<string>("SkillFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SkillFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("SkillFeatId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillFeats");

                    b.HasData(
                        new
                        {
                            SkillFeatId = 1,
                            PrerequisiteTraining = "trained",
                            RequiredLevel = 1,
                            SkillFeatDescription = "You've researched many faiths enough to recognize notions about them that are unlikely to be true. If you roll a critical failure at a Religion check to decipher writing of a religious nature or to recall knowledge about the tenets of faiths, you get a failure instead. When attempting to recall knowledge about the tenets of your own faith, if you roll a failure, you get a success instead, and if you roll a success, you get a critical success instead.",
                            SkillFeatName = "Student of the Canon",
                            SkillId = 12
                        },
                        new
                        {
                            SkillFeatId = 2,
                            PrerequisiteTraining = "trained",
                            RequiredLevel = 1,
                            SkillFeatDescription = "You often smuggle things past the authorities. When the GM rolls your Stealth check to see if a passive observer notices a small item you have concealed, the GM uses the number rolled or 10—whichever is higher—as the result of your die roll, adding it to your Stealth modifier to determine your Stealth check result. If you're a master in Stealth, the GM uses the number rolled or 15, and if you're legendary in Stealth, you automatically succeed at hiding a small concealed item from passive observers. This provides no benefits when a creature attempts a Perception check while actively searching you for hidden items. Due to your smuggling skill, you're more likely to find more lucrative smuggling jobs when using Underworld Lore to Earn Income.",
                            SkillFeatName = "Experienced Smuggler",
                            SkillId = 14
                        },
                        new
                        {
                            SkillFeatId = 3,
                            PrerequisiteTraining = "trained",
                            RequiredLevel = 1,
                            SkillFeatDescription = "While using Survival to Subsist, if you roll any result worse than a success, you get a success. On a success, you can provide subsistence living for yourself and four additional creatures, and on a critical success, you can take care of twice as many creatures as on a success. Each time your proficiency rank in Survival increases, double the number of additional creatures you can take care of on a success (to eight if you're an expert, 16 if you're a master, or 32 if you're legendary). You can choose to care for half the number of additional creatures and provide a comfortable living instead of subsistence living. Multiple smaller creatures or creatures with significantly smaller appetites than a human are counted as a single creature for this feat, and larger creatures or those with significantly greater appetites each count as multiple creatures. The GM determines how much a non-human creature needs to eat.",
                            SkillFeatName = "Forager",
                            SkillId = 15
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryBoost", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", "Ancestry")
                        .WithMany("AncestryBoosts")
                        .HasForeignKey("AncestryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Boost", "Boost")
                        .WithMany("AncestryBoosts")
                        .HasForeignKey("BoostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ancestry");

                    b.Navigation("Boost");
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", "Ancestry")
                        .WithMany("AncestryFeats")
                        .HasForeignKey("AncestryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ancestry");
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFlaw", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", "Ancestry")
                        .WithMany("AncestryFlaws")
                        .HasForeignKey("AncestryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Flaw", "Flaw")
                        .WithMany("AncestryFlaws")
                        .HasForeignKey("FlawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ancestry");

                    b.Navigation("Flaw");
                });

            modelBuilder.Entity("CharacterCreator.Models.Background", b =>
                {
                    b.HasOne("CharacterCreator.Models.SkillFeat", "SkillFeat")
                        .WithMany()
                        .HasForeignKey("SkillFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.BackgroundBoost", b =>
                {
                    b.HasOne("CharacterCreator.Models.Background", "Background")
                        .WithMany("BackgroundBoosts")
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Boost", "Boost")
                        .WithMany("BackgroundBoosts")
                        .HasForeignKey("BoostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("Boost");
                });

            modelBuilder.Entity("CharacterCreator.Models.BackgroundSkill", b =>
                {
                    b.HasOne("CharacterCreator.Models.Background", "Background")
                        .WithMany("BackgroundSkills")
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CharacterCreator.Models.Character", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", "Ancestry")
                        .WithMany("Characters")
                        .HasForeignKey("AncestryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Background", "Background")
                        .WithMany("Characters")
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.CharacterClass", "CharacterClass")
                        .WithMany("Characters")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Ancestry");

                    b.Navigation("Background");

                    b.Navigation("CharacterClass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterAncestryFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.AncestryFeat", "AncestryFeat")
                        .WithMany("CharacterAncestryFeats")
                        .HasForeignKey("AncestryFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterAncestryFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AncestryFeat");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClassFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterClassFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.ClassFeat", "ClassFeat")
                        .WithMany("CharacterClassFeats")
                        .HasForeignKey("ClassFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("ClassFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClassSkill", b =>
                {
                    b.HasOne("CharacterCreator.Models.CharacterClass", "CharacterClass")
                        .WithMany("CharacterClassSkills")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterGeneralFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterGeneralFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.GeneralFeat", "GeneralFeat")
                        .WithMany()
                        .HasForeignKey("GeneralFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("GeneralFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterSkill", b =>
                {
                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterSkillFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterSkillFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.GeneralFeat", null)
                        .WithMany("CharacterSkillFeats")
                        .HasForeignKey("GeneralFeatId");

                    b.HasOne("CharacterCreator.Models.SkillFeat", "SkillFeat")
                        .WithMany("CharacterSkillFeats")
                        .HasForeignKey("SkillFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("SkillFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.ClassFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.CharacterClass", "CharacterClass")
                        .WithMany("ClassFeats")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("CharacterCreator.Models.SkillFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Skill", "Skill")
                        .WithMany("SkillFeats")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterCreator.Models.Ancestry", b =>
                {
                    b.Navigation("AncestryBoosts");

                    b.Navigation("AncestryFeats");

                    b.Navigation("AncestryFlaws");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFeat", b =>
                {
                    b.Navigation("CharacterAncestryFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Background", b =>
                {
                    b.Navigation("BackgroundBoosts");

                    b.Navigation("BackgroundSkills");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("CharacterCreator.Models.Boost", b =>
                {
                    b.Navigation("AncestryBoosts");

                    b.Navigation("BackgroundBoosts");
                });

            modelBuilder.Entity("CharacterCreator.Models.Character", b =>
                {
                    b.Navigation("CharacterAncestryFeats");

                    b.Navigation("CharacterClassFeats");

                    b.Navigation("CharacterGeneralFeats");

                    b.Navigation("CharacterSkillFeats");

                    b.Navigation("CharacterSkills");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClass", b =>
                {
                    b.Navigation("CharacterClassSkills");

                    b.Navigation("Characters");

                    b.Navigation("ClassFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.ClassFeat", b =>
                {
                    b.Navigation("CharacterClassFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Flaw", b =>
                {
                    b.Navigation("AncestryFlaws");
                });

            modelBuilder.Entity("CharacterCreator.Models.GeneralFeat", b =>
                {
                    b.Navigation("CharacterSkillFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Skill", b =>
                {
                    b.Navigation("SkillFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.SkillFeat", b =>
                {
                    b.Navigation("CharacterSkillFeats");
                });
#pragma warning restore 612, 618
        }
    }
}
