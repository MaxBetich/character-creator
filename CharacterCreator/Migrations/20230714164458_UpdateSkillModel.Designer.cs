// <auto-generated />
using System;
using CharacterCreator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterCreator.Migrations
{
    [DbContext(typeof(CharacterCreatorContext))]
    [Migration("20230714164458_UpdateSkillModel")]
    partial class UpdateSkillModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CharacterCreator.Models.Ancestry", b =>
                {
                    b.Property<int>("AncestryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AncestryDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("AncestryName")
                        .HasColumnType("longtext");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("Speed")
                        .HasColumnType("longtext");

                    b.Property<int>("StartingHitpoints")
                        .HasColumnType("int");

                    b.Property<string>("Trait")
                        .HasColumnType("longtext");

                    b.HasKey("AncestryId");

                    b.ToTable("Ancestries");
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFeat", b =>
                {
                    b.Property<int>("AncestryFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AncestryFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("AncestryFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("AncestryId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("AncestryFeatId");

                    b.HasIndex("AncestryId");

                    b.ToTable("AncestryFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CharacterCreator.Models.Background", b =>
                {
                    b.Property<int>("BackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BackgroundDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundName")
                        .HasColumnType("longtext");

                    b.Property<int>("SkillFeatId")
                        .HasColumnType("int");

                    b.HasKey("BackgroundId");

                    b.HasIndex("SkillFeatId");

                    b.ToTable("Backgrounds");
                });

            modelBuilder.Entity("CharacterCreator.Models.Boost", b =>
                {
                    b.Property<int>("BoostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbilityBoost")
                        .HasColumnType("longtext");

                    b.Property<int?>("AncestryId")
                        .HasColumnType("int");

                    b.Property<int?>("BackgroundId")
                        .HasColumnType("int");

                    b.HasKey("BoostId");

                    b.HasIndex("AncestryId");

                    b.HasIndex("BackgroundId");

                    b.ToTable("Boosts");
                });

            modelBuilder.Entity("CharacterCreator.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AncestryId")
                        .HasColumnType("int");

                    b.Property<int>("BackgroundId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<string>("CharacterName")
                        .HasColumnType("longtext");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("Hitpoints")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("AncestryId");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterAncestryFeat", b =>
                {
                    b.Property<int>("CharacterAncestryFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AncestryFeatId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("CharacterAncestryFeatId");

                    b.HasIndex("AncestryFeatId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAncestryFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClass", b =>
                {
                    b.Property<int>("CharacterClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CharacterClassDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("CharacterClassName")
                        .HasColumnType("longtext");

                    b.Property<string>("KeyAbility")
                        .HasColumnType("longtext");

                    b.Property<int>("StartingHitpoints")
                        .HasColumnType("int");

                    b.HasKey("CharacterClassId");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClassFeat", b =>
                {
                    b.Property<int>("CharacterClassFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ClassFeatId")
                        .HasColumnType("int");

                    b.HasKey("CharacterClassFeatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ClassFeatId");

                    b.ToTable("CharacterClassFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterGeneralFeat", b =>
                {
                    b.Property<int>("CharacterGeneralFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("GeneralFeatId")
                        .HasColumnType("int");

                    b.HasKey("CharacterGeneralFeatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GeneralFeatId");

                    b.ToTable("CharacterGeneralFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterSkillFeat", b =>
                {
                    b.Property<int>("CharacterSkillFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralFeatId")
                        .HasColumnType("int");

                    b.Property<int>("SkillFeatId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSkillFeatId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GeneralFeatId");

                    b.HasIndex("SkillFeatId");

                    b.ToTable("CharacterSkillFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.ClassFeat", b =>
                {
                    b.Property<int>("ClassFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<string>("ClassFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ClassFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("ClassFeatId");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("ClassFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Flaw", b =>
                {
                    b.Property<int>("FlawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbilityFlaw")
                        .HasColumnType("longtext");

                    b.Property<int?>("AncestryId")
                        .HasColumnType("int");

                    b.HasKey("FlawId");

                    b.HasIndex("AncestryId");

                    b.ToTable("Flaws");
                });

            modelBuilder.Entity("CharacterCreator.Models.GeneralFeat", b =>
                {
                    b.Property<int>("GeneralFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GeneralFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.HasKey("GeneralFeatId");

                    b.ToTable("GeneralFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BackgroundId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .HasColumnType("longtext");

                    b.HasKey("SkillId");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CharacterCreator.Models.SkillFeat", b =>
                {
                    b.Property<int>("SkillFeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PrerequisiteTraining")
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("int");

                    b.Property<string>("SkillFeatDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("SkillFeatName")
                        .HasColumnType("longtext");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("SkillFeatId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillFeats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", "Ancestry")
                        .WithMany("AncestryFeats")
                        .HasForeignKey("AncestryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ancestry");
                });

            modelBuilder.Entity("CharacterCreator.Models.Background", b =>
                {
                    b.HasOne("CharacterCreator.Models.SkillFeat", "SkillFeat")
                        .WithMany()
                        .HasForeignKey("SkillFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.Boost", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", null)
                        .WithMany("Boosts")
                        .HasForeignKey("AncestryId");

                    b.HasOne("CharacterCreator.Models.Background", null)
                        .WithMany("Boosts")
                        .HasForeignKey("BackgroundId");
                });

            modelBuilder.Entity("CharacterCreator.Models.Character", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", "Ancestry")
                        .WithMany("Characters")
                        .HasForeignKey("AncestryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Background", "Background")
                        .WithMany("Characters")
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.CharacterClass", "CharacterClass")
                        .WithMany("Characters")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Ancestry");

                    b.Navigation("Background");

                    b.Navigation("CharacterClass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterAncestryFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.AncestryFeat", "AncestryFeat")
                        .WithMany("CharacterAncestryFeats")
                        .HasForeignKey("AncestryFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterAncestryFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AncestryFeat");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClassFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterClassFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.ClassFeat", "ClassFeat")
                        .WithMany("CharacterClassFeats")
                        .HasForeignKey("ClassFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("ClassFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterGeneralFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterGeneralFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.GeneralFeat", "GeneralFeat")
                        .WithMany()
                        .HasForeignKey("GeneralFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("GeneralFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterSkillFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Character", "Character")
                        .WithMany("CharacterSkillFeats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.GeneralFeat", null)
                        .WithMany("CharacterSkillFeats")
                        .HasForeignKey("GeneralFeatId");

                    b.HasOne("CharacterCreator.Models.SkillFeat", "SkillFeat")
                        .WithMany("CharacterSkillFeats")
                        .HasForeignKey("SkillFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("SkillFeat");
                });

            modelBuilder.Entity("CharacterCreator.Models.ClassFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.CharacterClass", "CharacterClass")
                        .WithMany("ClassFeats")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("CharacterCreator.Models.Flaw", b =>
                {
                    b.HasOne("CharacterCreator.Models.Ancestry", null)
                        .WithMany("Flaws")
                        .HasForeignKey("AncestryId");
                });

            modelBuilder.Entity("CharacterCreator.Models.Skill", b =>
                {
                    b.HasOne("CharacterCreator.Models.Background", null)
                        .WithMany("Skills")
                        .HasForeignKey("BackgroundId");

                    b.HasOne("CharacterCreator.Models.CharacterClass", null)
                        .WithMany("Skills")
                        .HasForeignKey("CharacterClassId");

                    b.HasOne("CharacterCreator.Models.Character", null)
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterCreator.Models.SkillFeat", b =>
                {
                    b.HasOne("CharacterCreator.Models.Skill", "Skill")
                        .WithMany("SkillFeats")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CharacterCreator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterCreator.Models.Ancestry", b =>
                {
                    b.Navigation("AncestryFeats");

                    b.Navigation("Boosts");

                    b.Navigation("Characters");

                    b.Navigation("Flaws");
                });

            modelBuilder.Entity("CharacterCreator.Models.AncestryFeat", b =>
                {
                    b.Navigation("CharacterAncestryFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Background", b =>
                {
                    b.Navigation("Boosts");

                    b.Navigation("Characters");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CharacterCreator.Models.Character", b =>
                {
                    b.Navigation("CharacterAncestryFeats");

                    b.Navigation("CharacterClassFeats");

                    b.Navigation("CharacterGeneralFeats");

                    b.Navigation("CharacterSkillFeats");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CharacterCreator.Models.CharacterClass", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ClassFeats");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CharacterCreator.Models.ClassFeat", b =>
                {
                    b.Navigation("CharacterClassFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.GeneralFeat", b =>
                {
                    b.Navigation("CharacterSkillFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.Skill", b =>
                {
                    b.Navigation("SkillFeats");
                });

            modelBuilder.Entity("CharacterCreator.Models.SkillFeat", b =>
                {
                    b.Navigation("CharacterSkillFeats");
                });
#pragma warning restore 612, 618
        }
    }
}
